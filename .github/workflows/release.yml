name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags (e.g., v1.0.0, v1.2.3)

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21]
        os: [linux, darwin]
        arch: [amd64, arm64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper versioning

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v ./...

    - name: Run linter
      run: go vet ./...

    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted. Please run 'go fmt ./...'"
          gofmt -s -l .
          exit 1
        fi

    - name: Build and archive
      run: |
        # Set binary name
        BINARY_NAME="terraform-provider-shodan"
        
        # Build with version info
        go build -ldflags="-s -w -X main.version=${{ github.ref_name }}" \
          -o "$BINARY_NAME" .
        
        # Create archive name
        ARCHIVE_NAME="terraform-provider-shodan_${{ github.ref_name }}_${{ matrix.os }}_${{ matrix.arch }}.tar.gz"
        tar -czf "$ARCHIVE_NAME" "$BINARY_NAME"
        
        # Create artifacts directory structure
        mkdir -p artifacts
        mv "$ARCHIVE_NAME" artifacts/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: terraform-provider-shodan-${{ matrix.os }}-${{ matrix.arch }}
        path: artifacts/*.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: List downloaded artifacts
      run: |
        echo "Artifacts directory structure:"
        find artifacts -type f -name "*.tar.gz" | sort
        echo "Total .tar.gz files found:"
        find artifacts -type f -name "*.tar.gz" | wc -l

    - name: Generate SHA256SUMS
      run: |
        cd artifacts
        find . -type f -name "*.tar.gz" -exec sha256sum {} + > SHA256SUMS
        echo "Generated SHA256SUMS:"
        cat SHA256SUMS

    - name: Rename SHA256SUMS files with version prefix
      run: |
        cd artifacts
        mv SHA256SUMS "terraform-provider-shodan_${{ github.ref_name }}_SHA256SUMS"
        echo "Renamed SHA256SUMS to terraform-provider-shodan_${{ github.ref_name }}_SHA256SUMS"

    - name: Import GPG key and Sign SHA256SUMS
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      run: |
        echo "$GPG_PRIVATE_KEY" | gpg --batch --import
        gpg --batch --yes --armor --detach-sign --output "artifacts/terraform-provider-shodan_${{ github.ref_name }}_SHA256SUMS.sig" "artifacts/terraform-provider-shodan_${{ github.ref_name }}_SHA256SUMS"
        echo "Generated terraform-provider-shodan_${{ github.ref_name }}_SHA256SUMS.sig"

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/**/*.tar.gz
          artifacts/terraform-provider-shodan_${{ github.ref_name }}_SHA256SUMS
          artifacts/terraform-provider-shodan_${{ github.ref_name }}_SHA256SUMS.sig
        generate_release_notes: true
        draft: false
        prerelease: false
        body: |
          ## üöÄ Terraform Provider for Shodan ${{ github.ref_name }}
          
          ### üì¶ What's New
          - Automated release with multi-platform binaries
          - Built for Go 1.21
          
          ### üîß Supported Platforms
          - **Linux**: AMD64, ARM64
          - **macOS**: AMD64 (Intel), ARM64 (Apple Silicon)
          
          ### üì• Installation
          Download the appropriate binary for your platform and follow the [installation instructions](https://github.com/AdconnectDevOps/terraform-provider-shodan#installation).
          
          ### ‚úÖ Verification
          You can verify the integrity of the downloaded files using the `SHA256SUMS` file and its signature `SHA256SUMS.sig`.
          
          ```bash
          # Verify checksums
          sha256sum --check SHA256SUMS
          
          # Verify signature (you'll need to import the signing key first)
          gpg --verify SHA256SUMS.sig SHA256SUMS
          ```
          
          ### üîç Changes
          See the [CHANGELOG](https://github.com/AdconnectDevOps/terraform-provider-shodan/blob/main/CHANGELOG.md) for detailed changes.
          
          ---
          *This release was automatically generated by GitHub Actions*
